datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int          @id @default(autoincrement())
  name         String
  email        String       @unique
  password     String
  role         Role[]
  createdAt    DateTime     @default(now())
  modifiedAt   DateTime     @default(now())
  restaurant   Restaurant[]
  Department   Department?  @relation(fields: [departmentId], references: [id])
  departmentId Int?
}

model Role {
  id     Int     @id @default(autoincrement())
  name   String?
  User   User?   @relation(fields: [userId], references: [id])
  userId Int?
}

model Restaurant {
  id           Int          @id @default(autoincrement())
  name         String?
  owner        User?        @relation(fields: [ownerId], references: [id])
  ownerId      Int?
  registerDate DateTime     @default(now())
  department   Department[]
}

model Department {
  id           Int            @id @default(autoincrement())
  name         String
  member       User[]
  notification Notification[]
  Restaurant   Restaurant?    @relation(fields: [restaurantId], references: [id])
  restaurantId Int?
}

model Notification {
  id      Int    @id @default(autoincrement())
  message String

  Department   Department? @relation(fields: [departmentId], references: [id])
  departmentId Int?
}

// menu collection
model MenuCollection {
  id         Int        @id @default(autoincrement())
  name       String?
  items      MenuItem[]
  createdAt  DateTime   @default(now())
  modifiedAt DateTime   @default(now())
}

model MenuItem {
  id         Int      @id @default(autoincrement())
  name       String?
  price      Float    @default(0.0)
  imgUrl     String
  isAService Boolean  @default(false)
  createdAt  DateTime @default(now())
  modifiedAt DateTime @default(now())

  MenuCollection   MenuCollection? @relation(fields: [menuCollectionId], references: [id])
  menuCollectionId Int?
  OrderItem        OrderItem[]
}

// Table
model Table {
  id    Int     @id @default(autoincrement())
  name  String
  Order Order[]
}

// order flow
model Order {
  id          Int         @id @default(autoincrement())
  items       OrderItem[]
  isFinish    Boolean     @default(false)
  note        String
  createdAt   DateTime    @default(now())
  modifiedAt  DateTime    @default(now())
  orderType   OrderType?  @relation(fields: [orderTypeId], references: [id])
  orderTypeId Int?

  table   Table     @relation(fields: [tableId], references: [id])
  tableId Int
  Receipt Receipt[]
}

model OrderItem {
  id         Int       @id @default(autoincrement())
  item       MenuItem? @relation(fields: [menuItemId], references: [id])
  menuItemId Int?
  quantity   Int
  Order      Order?    @relation(fields: [orderId], references: [id])
  orderId    Int?
}

model OrderType {
  id    Int     @id @default(autoincrement())
  name  String?
  Order Order[]
}

model Receipt {
  id         Int    @id @default(autoincrement())
  order      Order? @relation(fields: [orderId], references: [id])
  orderId    Int?
  total      Float  @default(0.0)
  discount   Float  @default(0.0)
  receiptUrl String //(PDF receipt)

  createdAt  DateTime @default(now())
  modifiedAt DateTime @default(now())
}
